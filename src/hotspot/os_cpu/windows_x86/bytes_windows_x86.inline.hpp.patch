diff a/src/hotspot/os_cpu/windows_x86/bytes_windows_x86.inline.hpp b/src/hotspot/os_cpu/windows_x86/bytes_windows_x86.inline.hpp
--- a/src/hotspot/os_cpu/windows_x86/bytes_windows_x86.inline.hpp
+++ b/src/hotspot/os_cpu/windows_x86/bytes_windows_x86.inline.hpp
@@ -23,18 +23,21 @@
  */
 
 #ifndef OS_CPU_WINDOWS_X86_BYTES_WINDOWS_X86_INLINE_HPP
 #define OS_CPU_WINDOWS_X86_BYTES_WINDOWS_X86_INLINE_HPP
 
+#include <stdlib.h>
+
+#ifndef AMD64
 #pragma warning(disable: 4035) // Disable warning 4035: no return value
+#endif
 
 // Efficient swapping of data bytes from Java byte
 // ordering to native byte ordering and vice versa.
 inline u2 Bytes::swap_u2(u2 x) {
 #ifdef AMD64
-  address p = (address) &x;
-  return  ( (u2(p[0]) << 8 ) | ( u2(p[1])) );
+  return _byteswap_ushort(x);
 #else
   __asm {
     mov ax, x
     xchg al, ah
   }
@@ -43,12 +46,11 @@
 #endif // AMD64
 }
 
 inline u4 Bytes::swap_u4(u4 x) {
 #ifdef AMD64
-  address p = (address) &x;
-  return ( (u4(p[0]) << 24) | (u4(p[1]) << 16) | (u4(p[2]) << 8) | u4(p[3])) ;
+  return _byteswap_ulong(x);
 #else
   __asm {
     mov eax, x
     bswap eax
   }
@@ -57,13 +59,11 @@
 #endif // AMD64
 }
 
 #ifdef AMD64
 inline u8 Bytes::swap_u8(u8 x) {
-  address p = (address) &x;
-  return ( (u8(p[0]) << 56) | (u8(p[1]) << 48) | (u8(p[2]) << 40) | (u8(p[3]) << 32) |
-           (u8(p[4]) << 24) | (u8(p[5]) << 16) | (u8(p[6]) << 8)  | u8(p[7])) ;
+  return _byteswap_uint64(x);
 }
 
 #else
 // Helper function for swap_u8
 inline u8 Bytes::swap_u8_base(u4 x, u4 y) {
