diff a/src/hotspot/cpu/aarch64/c1_FrameMap_aarch64.cpp b/src/hotspot/cpu/aarch64/c1_FrameMap_aarch64.cpp
--- a/src/hotspot/cpu/aarch64/c1_FrameMap_aarch64.cpp
+++ b/src/hotspot/cpu/aarch64/c1_FrameMap_aarch64.cpp
@@ -179,20 +179,25 @@
   map_register(i, r13); r13_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r14); r14_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r15); r15_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r16); r16_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r17); r17_opr = LIR_OprFact::single_cpu(i); i++;
+#ifndef _WIN64
   map_register(i, r18); r18_opr = LIR_OprFact::single_cpu(i); i++;
+#endif
   map_register(i, r19); r19_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r20); r20_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r21); r21_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r22); r22_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r23); r23_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r24); r24_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r25); r25_opr = LIR_OprFact::single_cpu(i); i++;
   map_register(i, r26); r26_opr = LIR_OprFact::single_cpu(i); i++;
 
+#ifdef _WIN64
+  map_register(i, r18); r18_opr = LIR_OprFact::single_cpu(i); i++; // TLS for Win
+#endif
   map_register(i, r27); r27_opr = LIR_OprFact::single_cpu(i); i++; // rheapbase
   map_register(i, r28); r28_opr = LIR_OprFact::single_cpu(i); i++; // rthread
   map_register(i, r29); r29_opr = LIR_OprFact::single_cpu(i); i++; // rfp
   map_register(i, r30); r30_opr = LIR_OprFact::single_cpu(i); i++; // lr
   map_register(i, r31_sp); sp_opr = LIR_OprFact::single_cpu(i); i++; // sp
@@ -225,11 +230,14 @@
   _caller_save_cpu_regs[11] = r13_opr;
   _caller_save_cpu_regs[12] = r14_opr;
   _caller_save_cpu_regs[13] = r15_opr;
   _caller_save_cpu_regs[14] = r16_opr;
   _caller_save_cpu_regs[15] = r17_opr;
+#ifndef _WIN64
+  // r18 used for TLS on Windows
   _caller_save_cpu_regs[16] = r18_opr;
+#endif
 
   for (int i = 0; i < 8; i++) {
     _caller_save_fpu_regs[i] = LIR_OprFact::single_fpu(i);
   }
 
