diff a/src/hotspot/os_cpu/windows_x86/os_windows_x86.cpp b/src/hotspot/os_cpu/windows_x86/os_windows_x86.cpp
--- a/src/hotspot/os_cpu/windows_x86/os_windows_x86.cpp
+++ b/src/hotspot/os_cpu/windows_x86/os_windows_x86.cpp
@@ -67,17 +67,14 @@
 #define REG_SP Esp
 #define REG_FP Ebp
 #define REG_PC Eip
 #endif // AMD64
 
-extern LONG WINAPI topLevelExceptionFilter(_EXCEPTION_POINTERS* );
-
 // Install a win32 structured exception handler around thread.
 void os::os_exception_wrapper(java_call_t f, JavaValue* value, const methodHandle& method, JavaCallArguments* args, Thread* thread) {
-  __try {
-
 #ifndef AMD64
+  __try {
     // We store the current thread in this wrapperthread location
     // and determine how far away this address is from the structured
     // execption pointer that FS:[0] points to.  This get_thread
     // code can then get the thread pointer via FS.
     //
@@ -111,241 +108,17 @@
     }
 #endif // ASSERT
 #endif // !AMD64
 
     f(value, method, args, thread);
-  } __except(topLevelExceptionFilter((_EXCEPTION_POINTERS*)_exception_info())) {
+#ifndef AMD64
+  } __except(EXCEPTION_CONTINUE_EXECUTION) {
       // Nothing to do.
   }
+#endif
 }
 
-#ifdef AMD64
-
-// This is the language specific handler for exceptions
-// originating from dynamically generated code.
-// We call the standard structured exception handler
-// We only expect Continued Execution since we cannot unwind
-// from generated code.
-LONG HandleExceptionFromCodeCache(
-  IN PEXCEPTION_RECORD ExceptionRecord,
-  IN ULONG64 EstablisherFrame,
-  IN OUT PCONTEXT ContextRecord,
-  IN OUT PDISPATCHER_CONTEXT DispatcherContext) {
-  EXCEPTION_POINTERS ep;
-  LONG result;
-
-  ep.ExceptionRecord = ExceptionRecord;
-  ep.ContextRecord = ContextRecord;
-
-  result = topLevelExceptionFilter(&ep);
-
-  // We better only get a CONTINUE_EXECUTION from our handler
-  // since we don't have unwind information registered.
-
-  guarantee( result == EXCEPTION_CONTINUE_EXECUTION,
-             "Unexpected result from topLevelExceptionFilter");
-
-  return(ExceptionContinueExecution);
-}
-
-
-// Structure containing the Windows Data Structures required
-// to register our Code Cache exception handler.
-// We put these in the CodeCache since the API requires
-// all addresses in these structures are relative to the Code
-// area registered with RtlAddFunctionTable.
-typedef struct {
-  char ExceptionHandlerInstr[16];  // jmp HandleExceptionFromCodeCache
-  RUNTIME_FUNCTION rt;
-  UNWIND_INFO_EH_ONLY unw;
-} DynamicCodeData, *pDynamicCodeData;
-
-#endif // AMD64
-//
-// Register our CodeCache area with the OS so it will dispatch exceptions
-// to our topLevelExceptionFilter when we take an exception in our
-// dynamically generated code.
-//
-// Arguments:  low and high are the address of the full reserved
-// codeCache area
-//
-bool os::register_code_area(char *low, char *high) {
-#ifdef AMD64
-
-  ResourceMark rm;
-
-  pDynamicCodeData pDCD;
-  PRUNTIME_FUNCTION prt;
-  PUNWIND_INFO_EH_ONLY punwind;
-
-  BufferBlob* blob = BufferBlob::create("CodeCache Exception Handler", sizeof(DynamicCodeData));
-  CodeBuffer cb(blob);
-  MacroAssembler* masm = new MacroAssembler(&cb);
-  pDCD = (pDynamicCodeData) masm->pc();
-
-  masm->jump(ExternalAddress((address)&HandleExceptionFromCodeCache));
-  masm->flush();
-
-  // Create an Unwind Structure specifying no unwind info
-  // other than an Exception Handler
-  punwind = &pDCD->unw;
-  punwind->Version = 1;
-  punwind->Flags = UNW_FLAG_EHANDLER;
-  punwind->SizeOfProlog = 0;
-  punwind->CountOfCodes = 0;
-  punwind->FrameRegister = 0;
-  punwind->FrameOffset = 0;
-  punwind->ExceptionHandler = (char *)(&(pDCD->ExceptionHandlerInstr[0])) -
-                              (char*)low;
-  punwind->ExceptionData[0] = 0;
-
-  // This structure describes the covered dynamic code area.
-  // Addresses are relative to the beginning on the code cache area
-  prt = &pDCD->rt;
-  prt->BeginAddress = 0;
-  prt->EndAddress = (ULONG)(high - low);
-  prt->UnwindData = ((char *)punwind - low);
-
-  guarantee(RtlAddFunctionTable(prt, 1, (ULONGLONG)low),
-            "Failed to register Dynamic Code Exception Handler with RtlAddFunctionTable");
-
-#endif // AMD64
-  return true;
-}
-
-// Atomics and Stub Functions
-
-typedef int32_t   xchg_func_t            (int32_t,  volatile int32_t*);
-typedef int64_t   xchg_long_func_t       (int64_t,  volatile int64_t*);
-typedef int32_t   cmpxchg_func_t         (int32_t,  volatile int32_t*, int32_t);
-typedef int8_t    cmpxchg_byte_func_t    (int8_t,   volatile int8_t*,  int8_t);
-typedef int64_t   cmpxchg_long_func_t    (int64_t,  volatile int64_t*, int64_t);
-typedef int32_t   add_func_t             (int32_t,  volatile int32_t*);
-typedef int64_t   add_long_func_t        (int64_t,  volatile int64_t*);
-
-#ifdef AMD64
-
-int32_t os::atomic_xchg_bootstrap(int32_t exchange_value, volatile int32_t* dest) {
-  // try to use the stub:
-  xchg_func_t* func = CAST_TO_FN_PTR(xchg_func_t*, StubRoutines::atomic_xchg_entry());
-
-  if (func != NULL) {
-    os::atomic_xchg_func = func;
-    return (*func)(exchange_value, dest);
-  }
-  assert(Threads::number_of_threads() == 0, "for bootstrap only");
-
-  int32_t old_value = *dest;
-  *dest = exchange_value;
-  return old_value;
-}
-
-int64_t os::atomic_xchg_long_bootstrap(int64_t exchange_value, volatile int64_t* dest) {
-  // try to use the stub:
-  xchg_long_func_t* func = CAST_TO_FN_PTR(xchg_long_func_t*, StubRoutines::atomic_xchg_long_entry());
-
-  if (func != NULL) {
-    os::atomic_xchg_long_func = func;
-    return (*func)(exchange_value, dest);
-  }
-  assert(Threads::number_of_threads() == 0, "for bootstrap only");
-
-  int64_t old_value = *dest;
-  *dest = exchange_value;
-  return old_value;
-}
-
-
-int32_t os::atomic_cmpxchg_bootstrap(int32_t exchange_value, volatile int32_t* dest, int32_t compare_value) {
-  // try to use the stub:
-  cmpxchg_func_t* func = CAST_TO_FN_PTR(cmpxchg_func_t*, StubRoutines::atomic_cmpxchg_entry());
-
-  if (func != NULL) {
-    os::atomic_cmpxchg_func = func;
-    return (*func)(exchange_value, dest, compare_value);
-  }
-  assert(Threads::number_of_threads() == 0, "for bootstrap only");
-
-  int32_t old_value = *dest;
-  if (old_value == compare_value)
-    *dest = exchange_value;
-  return old_value;
-}
-
-int8_t os::atomic_cmpxchg_byte_bootstrap(int8_t exchange_value, volatile int8_t* dest, int8_t compare_value) {
-  // try to use the stub:
-  cmpxchg_byte_func_t* func = CAST_TO_FN_PTR(cmpxchg_byte_func_t*, StubRoutines::atomic_cmpxchg_byte_entry());
-
-  if (func != NULL) {
-    os::atomic_cmpxchg_byte_func = func;
-    return (*func)(exchange_value, dest, compare_value);
-  }
-  assert(Threads::number_of_threads() == 0, "for bootstrap only");
-
-  int8_t old_value = *dest;
-  if (old_value == compare_value)
-    *dest = exchange_value;
-  return old_value;
-}
-
-#endif // AMD64
-
-int64_t os::atomic_cmpxchg_long_bootstrap(int64_t exchange_value, volatile int64_t* dest, int64_t compare_value) {
-  // try to use the stub:
-  cmpxchg_long_func_t* func = CAST_TO_FN_PTR(cmpxchg_long_func_t*, StubRoutines::atomic_cmpxchg_long_entry());
-
-  if (func != NULL) {
-    os::atomic_cmpxchg_long_func = func;
-    return (*func)(exchange_value, dest, compare_value);
-  }
-  assert(Threads::number_of_threads() == 0, "for bootstrap only");
-
-  int64_t old_value = *dest;
-  if (old_value == compare_value)
-    *dest = exchange_value;
-  return old_value;
-}
-
-#ifdef AMD64
-
-int32_t os::atomic_add_bootstrap(int32_t add_value, volatile int32_t* dest) {
-  // try to use the stub:
-  add_func_t* func = CAST_TO_FN_PTR(add_func_t*, StubRoutines::atomic_add_entry());
-
-  if (func != NULL) {
-    os::atomic_add_func = func;
-    return (*func)(add_value, dest);
-  }
-  assert(Threads::number_of_threads() == 0, "for bootstrap only");
-
-  return (*dest) += add_value;
-}
-
-int64_t os::atomic_add_long_bootstrap(int64_t add_value, volatile int64_t* dest) {
-  // try to use the stub:
-  add_long_func_t* func = CAST_TO_FN_PTR(add_long_func_t*, StubRoutines::atomic_add_long_entry());
-
-  if (func != NULL) {
-    os::atomic_add_long_func = func;
-    return (*func)(add_value, dest);
-  }
-  assert(Threads::number_of_threads() == 0, "for bootstrap only");
-
-  return (*dest) += add_value;
-}
-
-xchg_func_t*         os::atomic_xchg_func         = os::atomic_xchg_bootstrap;
-xchg_long_func_t*    os::atomic_xchg_long_func    = os::atomic_xchg_long_bootstrap;
-cmpxchg_func_t*      os::atomic_cmpxchg_func      = os::atomic_cmpxchg_bootstrap;
-cmpxchg_byte_func_t* os::atomic_cmpxchg_byte_func = os::atomic_cmpxchg_byte_bootstrap;
-add_func_t*          os::atomic_add_func          = os::atomic_add_bootstrap;
-add_long_func_t*     os::atomic_add_long_func     = os::atomic_add_long_bootstrap;
-
-#endif // AMD64
-
-cmpxchg_long_func_t* os::atomic_cmpxchg_long_func = os::atomic_cmpxchg_long_bootstrap;
-
 #ifdef AMD64
 /*
  * Windows/x64 does not use stack frames the way expected by Java:
  * [1] in most cases, there is no frame pointer. All locals are addressed via RSP
  * [2] in rare cases, when alloca() is used, a frame pointer is used, but this may
@@ -486,10 +259,45 @@
                                      StubRoutines::x86::get_previous_sp_entry());
   return (*func)();
 }
 #endif
 
+bool os::win32::get_frame_at_stack_banging_point(JavaThread* thread,
+        struct _EXCEPTION_POINTERS* exceptionInfo, address pc, frame* fr) {
+  PEXCEPTION_RECORD exceptionRecord = exceptionInfo->ExceptionRecord;
+  address addr = (address) exceptionRecord->ExceptionInformation[1];
+  if (Interpreter::contains(pc)) {
+    *fr = os::fetch_frame_from_context((void*)exceptionInfo->ContextRecord);
+    if (!fr->is_first_java_frame()) {
+      // get_frame_at_stack_banging_point() is only called when we
+      // have well defined stacks so java_sender() calls do not need
+      // to assert safe_for_sender() first.
+      *fr = fr->java_sender();
+    }
+  } else {
+    // more complex code with compiled code
+    assert(!Interpreter::contains(pc), "Interpreted methods should have been handled above");
+    CodeBlob* cb = CodeCache::find_blob(pc);
+    if (cb == NULL || !cb->is_nmethod() || cb->is_frame_complete_at(pc)) {
+      // Not sure where the pc points to, fallback to default
+      // stack overflow handling
+      return false;
+    } else {
+      // in compiled code, the stack banging is performed just after the return pc
+      // has been pushed on the stack
+      intptr_t* fp = (intptr_t*)exceptionInfo->ContextRecord->REG_FP;
+      intptr_t* sp = (intptr_t*)exceptionInfo->ContextRecord->REG_SP;
+      *fr = frame(sp + 1, fp, (address)*sp);
+      if (!fr->is_java_frame()) {
+        // See java_sender() comment above.
+        *fr = fr->java_sender();
+      }
+    }
+  }
+  assert(fr->is_java_frame(), "Safety check");
+  return true;
+}
 
 #ifndef AMD64
 intptr_t* _get_previous_fp() {
   intptr_t **frameptr;
   __asm {
